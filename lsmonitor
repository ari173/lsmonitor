#!/bin/sh

### BEGIN INIT INFO
# Provides:          lsmonitor
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Monitor Linkstation LS-CHLv2 and LS-XHL
# Description:       Enable service provided by daemon.
### END INIT INFO

#
# lsmonitor:
# - handle ls complete power-on
# - monitor hdd temperature & control fan speed
# - monitor hdd status & contol function led
# - monitor power switch
# - monitor function button
#
# Changelog:
# - Modified to work with a Debian kernel on a LS-CHLv2
# - Added hdd status monitoring
# - Modified to work with a vanilla kernel >= 3.6
# - Modified to work with a vanilla kernel >= 3.8
# - 2015.03.14 Modified to work with kernel 3.14 by ari173
#              update the control interface path
#              added monitor power switch. Recognize on / off / auto. shut down if power switch is in off position.
#              added monitor function button. Recognize normal or pressed state. todo: do something if button is pressed
#
# Copyright (C) 2013 Sergej Wildemann
##
# Based on:
#  blstools - Copyright (C) 2010 Michele Manzato
#
# Credits:
#  Thanks to archonfx on Buffalo NAS Central forum for HDD
#  temperature monitoring command.
##
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
##

# Location of pid file
PIDFILE=/var/run/lsmonitor_daemon.pid
LOGFILE=/var/log/lsmonitor.log

# Control interfaces
LINFO="/sys/devices/gpio_leds.3/leds/lsxl:amper:info"
LPOWER="/sys/devices/gpio_leds.3/leds/lsxl:blue:power"
LBFUNC="/sys/devices/gpio_leds.3/leds/lsxl:blue:func"
LAFUNC="/sys/devices/gpio_leds.3/leds/lsxl:red:func"
LALARM="/sys/devices/gpio_leds.3/leds/lsxl:red:alarm"

FAN_CTRL=/sys/bus/platform/drivers/gpio-fan/gpio_fan.4/hwmon/hwmon0
FAN_TARGET=${FAN_CTRL}/fan1_target
FAN_INPUT=${FAN_CTRL}/fan1_input

INPUT=/dev/input/event0

# Fan speeds
SPEED_STOP=0
SPEED_SLOW=1500
SPEED_HIGH=3250
SPEED_FULL=5000

# HDD temperature limits for fancontrol
HDDTEMP0=45
HDDTEMP1=50
HDDTEMP2=55


# logging
do_log() {
  [ -n "$LOGFILE" ] && echo "`date` $*" >> $LOGFILE
}


# Set and get current fan speed
fan_speed()
{
    if [ $1 = "get" ]; then
        cat $FAN_INPUT
    elif [ $1 = "set" ]; then
        echo $2 > $FAN_TARGET
    fi
}


# Get power switch state: on / off / auto
get_power_switch_state() {
    if [ -e $INPUT ]; then
        evtest --query $INPUT EV_SW SW_LID
        PWR=$?
        evtest --query $INPUT EV_SW SW_TABLET_MODE
        AUTO=$?

        if [ $PWR -eq 0 -a $AUTO -eq 10 ]; then
            echo auto
        elif [ $PWR -eq 10 -a $AUTO -eq 0 ]; then
            echo on
        elif [ $PWR -eq 0 -a $AUTO -eq 0 ]; then
            echo off
        fi
    fi
}


# get the function button state: normal / pressed
get_function_button_state() {
    evtest --query $INPUT EV_KEY KEY_OPTION
    RETVAL=$?

    if [ "$RETVAL" -eq 0 ]; then
        echo "normal"
    elif [ "$RETVAL" -eq 10 ]; then
        echo "pressed"
    fi
}



# Monitor HDD temperature & control fan speed
monitor_temperature()
{
    # Retrieve HDD temp
    HDDTEMP=$(smartctl /dev/sda --all | awk '$1 == "194" {print $10}')

    # Change fan speed accordingly
    if [ $HDDTEMP -le $HDDTEMP0 ]; then
        fan_speed set $SPEED_STOP
    elif [ $HDDTEMP -le $HDDTEMP1 ]; then
        fan_speed set $SPEED_SLOW
    elif [ $HDDTEMP -le $HDDTEMP2 ]; then
        fan_speed set $SPEED_HIGH
    else
        fan_speed set $SPEED_FULL
    fi
}


# Monitor HDD status and deactivate power led if idle
monitor_hdd()
{
    HDDSTATUS=$(hdparm -C /dev/sda | grep "standby")
    if [ -z "$HDDSTATUS" ]; then
        echo default-on > $LBFUNC/trigger
        if [ $HDDSTATUSOLD -eq 0 ]; then
            do_log "HDD active"
            HDDSTATUSOLD=1
        fi
    else
        echo none > $LBFUNC/trigger
        if [ $HDDSTATUSOLD -eq 1 ]; then
            do_log "HDD standby"
            HDDSTATUSOLD=0
        fi
    fi
}


# Control LS switch status to power down the unit
lsmonitor_daemon()
{
    COUNT=12
    HDDSTATUSOLD=0

    fan_speed set $SPEED_STOP

    while [ true ]; do
        # Check switch status
        local PWR_SW=`get_power_switch_state`
        case $PWR_SW in
            off)
                do_log "Initiating shutdown."
                break;
                ;;
            auto)
                # todo
                ;;
            *)
                ;;
        esac

        local FUNC_BUTTON=`get_function_button_state`
        case $FUNC_BUTTON in
            normal)
                # do nothing
                ;;
            pressed)
                do_log "function button was pressed"
                # todo
                ;;
        esac

        # Check HDD status
        monitor_hdd

        # Once per minute monitor HDD temperature
        if [ $COUNT -eq 12 ]; then
            COUNT=0
            monitor_temperature
        else
            COUNT=$(( $COUNT + 1 ))
        fi

        sleep 5
    done

    # Run the fan at low speed while halting, just in case halt hangs the unit
    fan_speed set $SPEED_LOW

    # blink power led
    echo timer > $LPOWER/trigger
    echo 100   > $LPOWER/delay_on
    echo 100   > $LPOWER/delay_off

    # Initiate unit shutdown
    halt
}

# Kill the lsmonitor daemon
kill_lsmonitor_daemon()
{
    PID=`cat $PIDFILE`
    if [ "$PID" != "" ] ; then
        kill $PID
        rm $PIDFILE
    fi
}


# Main

case $1 in
    start)
        # Start the lsmonitor daemon
        lsmonitor_daemon &
        echo $! > $PIDFILE
        ;;
    stop)
        # Kill the lsmonitor daemon
        kill_lsmonitor_daemon
        ;;
    restart)
        $0 stop && sleep 2 && $0 start
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 2
        ;;
esac
